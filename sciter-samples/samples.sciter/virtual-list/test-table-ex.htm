<html>
    <head>
        <title>behavior:virtual-list</title>
        <style>

table {
  size:*;
  border:1px solid #ccc;
  overflow-x:scroll-indicator;
}

tbody 
{
  behavior: virtual-list;
  prototype: Tape;
  overflow-y:scroll-indicator;
  size:*;
}

table > thead { 
   border-bottom:1px solid #ccc; 
   behavior: column-resizer;
 }

table > tbody > tr > td { white-space: nowrap; padding:0.25em 0.5em; } 

table > thead > tr > th:nth-child(1) { width: 8em; }
table > thead > tr > th:nth-child(2) { width: *; }
table > thead > tr > th:nth-child(3) { width: 8em; }
table > thead > tr > th:nth-child(4) { width: 10em; }
table > thead > tr > th:nth-child(5) { width: 10em; }
table > thead > tr > th:nth-child(6) { width: 20em; }

td > b {
  display:inline-block;
  width: max-content;
  padding:0 1em; 
  background:gold;
  margin:0 0.5em;
}

td > span.progress {
  display:inline-block;
  width:3ch;
  text-align:right;
}

        </style>
        <script>

function generateData() {
  let rows = new Array(20000);
  for(let n = 0; n < 20000; ++n) {
    rows[n] = {
      key: n,
      text: "Person Name " + n,
      progress1: Math.random() * 100,
      progress2: Math.random() * 100,
    };
  }
  return rows;
}


class Tape extends Element {

  rows = generateData();

  // scroll down
  appendElements(index, n) {
          if (index === undefined) index = 0;
          const elements = [];
          for (let i = 0; i < n; ++i, ++index) {
              if (index >= this.rows.length) break;
              elements.push(this.renderItem(index));
          }

          this.append(elements);
          return {moreafter: (this.rows.length - index)}; // return estimated number of items below this chunk
  }

  // scroll up
  prependElements(index, n) {
          if (index === undefined) index = this.rows.length - 1;
          const elements = [];
          for (let i = 0; i < n; ++i, --index) {
              if (index < 0) break;
              elements.push(this.renderItem(index));
          }

          elements.reverse();
          this.prepend(elements);
          return {morebefore: (index < 0 ? 0 : index + 1)}; // return estimated number of items above this chunk
  }

  // scroll to
  replaceElements(index, n) {
          const elements = [];
          const start = index;
          for (let i = 0; i < n; ++i, ++index) {
              if (index >= this.rows.length) break;
              elements.push(this.renderItem(index));
          }

          this.patch(elements);
          return {
              morebefore: (start <= 0 ? 0 : start),
              moreafter: (this.rows.length - index),
          }; // return estimated number of items before and above this chunk
  }

  renderItem(index) {
    const row = this.rows[index];
    return <tr key={row.key}>
        <td>{row.key}</td>
        <td>{row.text}</td>
        <td>{row.key}</td>
        <td><meter max="100" value={row.progress1} /><span.progress>{row.progress1.toFixed(0)}</span></td>
        <td><meter max="100" value={row.progress2} /><span.progress>{row.progress2.toFixed(0)}</span></td>
        <td><b>Edit</b> <b>Delete</b> <b>No Event</b> <b>Test</b></td>
    </tr>;
  }
  
  oncontentrequired(evt) {
          const {length, start, where} = evt.data;

          if (where > 0)
          // scrolling down, need to append more elements
              evt.data = this.appendElements(start, length);
          else if (where < 0)
          // scrolling up, need to prepend more elements
              evt.data = this.prependElements(start, length);
          else
          // scrolling to index
              evt.data = this.replaceElements(start, length);

          return true;
  }
}

        </script>
    </head>
    <body>

<table fixedlayout>
  <thead>
    <th>column 1</th>
    <th>column 2</th>
    <th>column 3</th>
    <th>column 4</th>
    <th>column 5</th>
    <th>column 6</th>
  </thead>
  <tbody>
  </tbody>
</table>

    </body>
</html>